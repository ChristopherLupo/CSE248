package account_mangement;

public class UserBag {
	private Node root;

	public void add(User user) {
		Node newNode = new Node();
		newNode.setUser(user);

		if (root == null) {
			root = newNode;
		} else {
			Node current = root;
			Node parent;
			while (true) {
				parent = current;
				if (current.getUser().getUsername().compareTo(newNode.getUser().getUsername()) > 0) {
					current = current.getLeftChild();
					if (current == null) {
						parent.setLeftChild(newNode);
						return;
					}
				} else {
					current = current.getRightChild();
					if (current == null) {
						parent.setRightChild(newNode);
						return;
					}
				}
			}
		}
	}

	public void fill(String[] boys, String[] girls, String[] lastNames) {

		for (int i = 0; i < 3000; i++) {
			User u = new User();

			int gender = (int) (Math.random() * 2);

			if (gender == 0) {
				u.setFirstName(boys[(int) (Math.random() * boys.length)]);
			} else {
				u.setFirstName(girls[(int) (Math.random() * girls.length)]);
			}

			u.setLastName(lastNames[(int) (Math.random() * lastNames.length)]);

			u.setId();
			u.isMale(boys);
			u.setGPA();
			u.setPassword();
			u.setUsername();
			add(u);
		}
	}

	public void display() {

		display(root);

	}
	
	public void display(Node localRoot){
		if (localRoot != null) {
			display(localRoot.getLeftChild());
			System.out.println(localRoot.getUser().toString());
			display(localRoot.getRightChild());
		}
	}

	public boolean searchAccount(String username) {
		Node current = root;
		while (current.getUser().getUsername().compareTo(username) != 0
				&& current.getUser().getUsername().equals(username) != true) {
			if (current.getUser().getUsername().compareTo(username) > 0) {
				current = current.getLeftChild();
			} else {
				current = current.getRightChild();
			}
			if (current == null) {
				return false;
			}
		}
		return true;
	}

	public boolean searchAccount(String username, String password) {
		Node current = root;
		while (current.getUser().getUsername().compareTo(username) != 0
				&& current.getUser().getUsername().equals(username) != true) {
			if (current.getUser().getUsername().compareTo(username) > 0) {
				current = current.getLeftChild();
			} else {
				current = current.getRightChild();
			}
			if (current == null) {
				return false;
			}
		}

		if (current.getUser().getPassword().equals(password)) {
			return true;
		}
		return false;

	}
}
